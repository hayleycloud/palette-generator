
function gplColor(c: number): string {
	const txt = c.toString();
	const len = txt.length;

	if(len == 1) {
		return "  " + txt;
	} else if(len == 2) {
		return " " + txt;
	} else {
		return txt;
	}
}

function createGPLFile(name: string, colors: ColorRGB[]): string {
	let file : string = "";

	file += "GIMP Palette\n";
	file += "#\n";
	file += "# Generated by Hayley Hatton's Mathematical Palette Generator\n";
	file += "#\n";

	colors.forEach((color, index) => {
		file += gplColor(color.r) + " ";
		file +=	gplColor(color.g) + " ";
		file += gplColor(color.b) + "\tIndex " + index + "\n";
	});

	return file;
}

function downloadFile(name: string, content: string) {
	const store = document.createElement("a");
	store.setAttribute("href", 
		"data:text/plain;charset=utf-8," + encodeURIComponent(content));
	store.setAttribute("download", name);

	document.body.appendChild(store);
	store.click();
	document.body.removeChild(store);
}

function downloadAsGPLFile() {
	const nameEl = <HTMLInputElement> document.getElementById("pal-name");
	const name = nameEl.value + ".gpl";

	const colors = getColorsFrom(getSamplers());

	downloadFile(name, createGPLFile(name, colors));
}

function saveBrowser() {

}

function loadBrowser() {
	
}

function spliceProperty(property: string): [string, string] {
	const idEnd = property.indexOf(':');

	const identifier = property.substr(0, idEnd);
	const params = property.substr(idEnd + 1);

	return [identifier, params];
}

function saveLocal() {
	let file : string = "V10\n";

	const palName = (<HTMLInputElement> document.getElementById("pal-name"));
	file += "name:" + palName.value + "\n";

	const maxColors = (<HTMLInputElement> document.getElementById("max-colors"));
	file += "size:" + maxColors.value + "\n";

	getSamplers().forEach(sampler => {
		file += sampler.serialize() + "\n";
	});

	downloadFile(palName.value + ".psf", file);
}

function loadLocal(data: string) {
	const parts = data.split('\n');

	if(parts[0] != "V10") {
		alert("Version not supported!");
		return;
	}

	const palName = (<HTMLInputElement> document.getElementById("pal-name"));
	palName.value = spliceProperty(parts[1])[1];

	const maxColors = (<HTMLInputElement> document.getElementById("max-colors"));
	maxColors.value = spliceProperty(parts[2])[1];

	resetSamplers();

	const props = parts.splice(3);
	props.forEach(prop => {
		const [identifier, params] = spliceProperty(prop);

		let sampler = null;
		switch(identifier) {
			case "LinearRGBSampler":
				sampler = LinearRGBSampler.deserialize(params);
				break;
			case "LinearSRGBSampler":
				sampler = LinearSRGBSampler.deserialize(params);
				break;
			case "BezierFastSampler":
				sampler = BezierFastSampler.deserialize(params);
				break;
			case "BezierQuadraticSampler":
				sampler = BezierQuadraticSampler.deserialize(params);
				break;
			case "HSVSampler":
				sampler = HSVSampler.deserialize(params);
				break;
			default:
				return;
		}

		sampler._htmlID = genSamplerID();
		getSamplers().push(sampler);

		addPropertyForExisting(sampler);
	});

	syncPaletteView();
	clampPropertyShiftBtns();
}

function createSettingsTable(): HTMLTableElement {
	const tbl = document.createElement("table");
	tbl.id = "settings";

	const thead = document.createElement("thead");
	const theadTR = document.createElement("tr");
	const theadTH = document.createElement("th");
	theadTH.textContent = "Settings";
	theadTH.colSpan = 2;

	const tbody = document.createElement("tbody");

	const palNameTR = document.createElement("tr");

	const palNameTH = document.createElement("th");
	palNameTH.textContent = "Name:";

	const palNameTD = document.createElement("td");

	const palName = document.createElement("input");
	palName.id = "pal-name";
	palName.type = "text";
	palName.value = "My Palette";
	palName.minLength = 1;
	palName.oninput = (event: InputEvent) => {
		validate();
	};

	palNameTD.appendChild(palName);

	const maxColorTR = document.createElement("tr");

	const maxColorTH = document.createElement("th");
	maxColorTH.textContent = "Max Palette Size:";

	const maxColorTD = document.createElement("td");

	const maxColors = document.createElement("input");
	maxColors.id = "max-colors";
	maxColors.type = "number";
	maxColors.min = "0";
	maxColors.step = "1";
	maxColors.value = "255";
	maxColors.onchange = () => { 
		let value = parseInt(maxColors.value);
		value = Math.max(value, parseInt(maxColors.min));
		maxColors.value = value.toString();
		validate(); 
	};

	maxColorTD.appendChild(maxColors);

	const errorsTR = document.createElement("tr");

	const errorsTH = document.createElement("th");
	errorsTH.textContent = "Errors:";

	const errorsTD = document.createElement("td");
	errorsTD.id = "errors";
	errorsTD.className = "errors-none";
	errorsTD.innerHTML = "<span class=\"errors-none\">No errors :)</span>";

	theadTR.appendChild(theadTH);
	thead.appendChild(theadTR);

	palNameTR.append(palNameTH, palNameTD);
	maxColorTR.append(maxColorTH, maxColorTD);
	errorsTR.append(errorsTH, errorsTD);
	tbody.append(palNameTR, maxColorTR, errorsTR);

	tbl.append(thead, tbody);

	return tbl;
}

function createPaletteTable(cols: number, colors: ColorRGB[])
: HTMLTableSectionElement
{
	const tbody = document.createElement("tbody");

	const rows = Math.ceil(colors.length / cols);
	for(let row = 0; row < rows; row++) {
		const tr = document.createElement("tr");

		let colCount = ((row+1) == rows) ? colors.length % cols : cols;
		if(colCount == 0)
			colCount = cols;

		for(let col = 0; col < colCount; col++) {
			const td = document.createElement("td");

			const colorIndex = (row * cols) + col;
			const color = colors[colorIndex];
			const colorHex = rgb2str(color);
			td.style.backgroundColor = colorHex;
			td.title = colorHex + 
				" (R: " + color.r + ", G: " + color.g + ", B: " + color.b + ")";

			tr.appendChild(td);
		}

		tbody.appendChild(tr);
	}

	return tbody;
}

function createPaletteView(cols: number, colors: ColorRGB[])
: HTMLTableElement 
{
	const tbl = document.createElement("table");
	tbl.classList.add("palette-view");
	tbl.id = "palette-view";

	const thead = document.createElement("thead");
	const theadTR = document.createElement("tr");
	const theadTH = document.createElement("th");
	theadTH.textContent = "Palette View";
	theadTH.colSpan = cols;

	const theadTR2 = document.createElement("tr");
	const theadTD = document.createElement("td");
	theadTD.colSpan = cols;

	const colSizer = document.createElement("input");
	colSizer.type = "number";
	colSizer.id = "col-count";
	colSizer.min = "1";
	colSizer.value = cols.toString();
	colSizer.step = "1";
	colSizer.size = 3;
	colSizer.onchange = () => { 
		let value = parseInt(colSizer.value);
		value = Math.max(value, parseInt(colSizer.min));
		colSizer.value = value.toString();

		syncPaletteView(); 
	};

	const colSizeLbl = <HTMLLabelElement> document.createElement("label");
	colSizeLbl.htmlFor = "col-count";
	colSizeLbl.textContent = "Columns: ";

	theadTD.append(colSizeLbl, colSizer);
	theadTR2.appendChild(theadTD);

	const theadTR3 = document.createElement("tr");
	const theadTD2 = document.createElement("td");
	theadTD2.colSpan = cols;

	const colorCount = document.createElement("input");
	colorCount.type = "number";
	colorCount.id = "color-count";
	colorCount.value = colors.length.toString();
	colorCount.step = "1";
	colorCount.size = 5;
	colorCount.readOnly = true;

	const colorCountLbl = <HTMLLabelElement> document.createElement("label");
	colorCountLbl.htmlFor = "color-count";
	colorCountLbl.textContent = "# Colors: ";

	theadTD2.append(colorCountLbl, colorCount);
	theadTR3.appendChild(theadTD2);

	const tbody = createPaletteTable(cols, colors);

	theadTR.appendChild(theadTH);
	thead.append(theadTR, theadTR2, theadTR3);
	tbl.appendChild(thead);
	tbl.appendChild(tbody);

	return tbl;
}

function createNewPaletteViewFrom(cols: number, samplers: Sampler[])
: HTMLTableElement 
{
	const colors = getColorsFrom(samplers);
	const paletteView = createPaletteView(cols, colors);
	return paletteView;
}

function updatePaletteViewFrom(samplers: Sampler[]) {
	const colSizer = <HTMLInputElement> document.getElementById("col-count");
	const numCols = parseInt(colSizer.value);

	const preexisting = document.getElementById("palette-view");
	preexisting.remove();
	
	const readoutSect = document.getElementById("readout-section");

	const paletteView = createNewPaletteViewFrom(numCols, samplers);
	readoutSect.appendChild(paletteView);
}

function syncPaletteView() {
	updatePaletteViewFrom(getSamplers());
	validate();
}

function clampPropertyShiftBtns() {
	const properties = document.getElementById("properties");

	const numChildren = properties.children.length;
	const lastIndex = properties.children.length - 1;

	if(numChildren == 0)
		return;

	const shiftBtns = properties.getElementsByClassName("shifter");
	for(let i = 0; i < shiftBtns.length; i++) {
		(<HTMLButtonElement> shiftBtns[i]).disabled = false;
	}

	const shiftUp = <HTMLButtonElement> 
		properties.children[0].getElementsByClassName("shift-up")[0];
	
	const shiftDn = <HTMLButtonElement>
		properties.children[lastIndex].getElementsByClassName("shift-down")[0];

	shiftUp.disabled = true;
	shiftDn.disabled = true;
}

function shiftPropertyUp(id: string) {
	const properties = document.getElementById("properties");

	const lastChildIndex = properties.children.length - 1;
	let prev = null;
	for(let i = 0; i < properties.children.length; i++) {
		const node = properties.children[i];

		if(prev && node.id == id) {
			properties.insertBefore(node, prev);

			const prevSampler = getSamplers()[i-1];
			const sampler = getSamplers()[i];
			const preSamples = i > 1 ? getSamplers().splice(0, i-1) : [];
			const postSamples = i < lastChildIndex ? getSamplers().splice(i+1) : [];

			setSamplers(preSamples
				.concat(sampler)
				.concat(prevSampler)
				.concat(postSamples));

			syncPaletteView();

			break;
		}

		prev = node;
	}

	clampPropertyShiftBtns();
}

function shiftPropertyDown(id: string) {
	const properties = document.getElementById("properties");

	const lastChildIndex = properties.children.length - 1;
	let prev = null;
	for(let i = lastChildIndex; i >= 0; i--) {
		const node = properties.children[i];

		if(prev && node.id == id) {
			properties.insertBefore(prev, node);

			const prevSampler = getSamplers()[i+1];
			const sampler = getSamplers()[i];
			const preSamples = i > 0 ? getSamplers().splice(0, i) : [];
			const postSamples = i < lastChildIndex ? getSamplers().splice(i+2) : [];

			setSamplers(preSamples
				.concat(prevSampler)
				.concat(sampler)
				.concat(postSamples));

			syncPaletteView();

			break;
		}

		prev = node;
	}

	clampPropertyShiftBtns();
}

function addPropertyActionsTo(
	tr: HTMLTableRowElement, id: string, htmlID: number) 
{
	const moveUp = document.createElement("button");
	moveUp.classList.add("shifter", "shift-up");
	moveUp.type = "button";
	moveUp.textContent = "";
	moveUp.onclick = () => { shiftPropertyUp(id); };

	const moveDown = document.createElement("button");
	moveDown.classList.add("shifter", "shift-down");
	moveDown.type = "button";
	moveDown.textContent = "";
	moveDown.onclick = () => { shiftPropertyDown(id); };

	const remover = document.createElement("a");
	remover.classList.add("remover");
	remover.textContent = "Remove";
	remover.onclick = () => { removeProperty(htmlID); };
	
	tr.children[2].append(
		moveUp,
		document.createElement("br"),
		remover,
		document.createElement("br"),
		moveDown);
}

function addPropertyForExisting(sampler: Sampler) {
	const properties = document.getElementById("properties");

	const row = sampler.createHTML();
	addPropertyActionsTo(row, "sampler-" + sampler.htmlID(), sampler.htmlID());

	properties.appendChild(row);
}

function addNewProperty(selector: HTMLSelectElement) {
	const properties = document.getElementById("properties");

	let sampler = null;
	switch(selector.value) {
		case "linear":
			sampler = new LinearRGBSampler(genSamplerID());
			break;
		case "linear-srgb":
			sampler = new LinearSRGBSampler(genSamplerID());
			break;
		case "bezier-fast":
			sampler = new BezierFastSampler(genSamplerID());
			break;
		case "bezier-quad":
			sampler = new BezierQuadraticSampler(genSamplerID());
			break;
		case "hsv":
			sampler = new HSVSampler(genSamplerID());
			break;
	}

	const samplerHtml = sampler.createHTML();
	addPropertyActionsTo(
		samplerHtml, "sampler-" + sampler.htmlID(), sampler.htmlID());
	properties.appendChild(samplerHtml);
	getSamplers().push(sampler);

	syncPaletteView();
	clampPropertyShiftBtns();
}

function createAddNewProperty(): HTMLTableSectionElement {
	const tfoot = document.createElement("tfoot");

	const tr = document.createElement("tr");
	const td = [
		document.createElement("td"),
		document.createElement("td"),
		document.createElement("td")
	];

	td[0].textContent = "Add New:";
	td[0].classList.add("pseudo-th");

	const selector = document.createElement("select");

	const select = document.createElement("option");
	select.text = "-- Select Mode --";
	select.disabled = true;
	select.hidden = true;
	select.selected = true;
	selector.add(select);

	const categories = [
		{
			name: "Linear Gradients",
			options: [
				{ id: "linear", title: "Linear (RGB)" },
				{ id: "linear-srgb", title: "Linear (sRGB)" }
			]
		},
		{
			name: "Exponential Gradients",
			options: [
				{ id: "bezier-fast", title: "Bézier (Fast)" },
				{ id: "bezier-quad", title: "Bézier" }
			]
		},
		{
			name: "Hue-Saturation-Value",
			options: [
				{ id: "hsv", title: "HSV" }
			]
		}
	];

	categories.forEach(category => {
		const categoryOpt = document.createElement("option");
		categoryOpt.text = category.name;
		categoryOpt.disabled = true;

		selector.add(categoryOpt);

		category.options.forEach(option => {
			const optionOpt = document.createElement("option");
			optionOpt.text = option.title;
			optionOpt.value = option.id;

			selector.add(optionOpt);
		});
	});

	td[1].appendChild(selector);

	const addBtn = document.createElement("button");
	addBtn.type = "button";
	addBtn.onclick = () => {
	   	addNewProperty(selector);
		selector.selectedIndex = 0;
		addBtn.disabled = true;
	};
	addBtn.textContent = "Add";
	addBtn.disabled = true;

	selector.onchange = () => { addBtn.disabled = false; };

	td[2].appendChild(addBtn);

	tr.append(td[0], td[1], td[2]);

	tfoot.appendChild(tr);

	return tfoot;
}

function removeProperty(id: number) {
	document.getElementById("sampler-" + id).remove();

	getSamplers().forEach((sampler, index) => { 
		if(sampler.htmlID() == id)
			getSamplers().splice(index, 1);
   	});

	syncPaletteView();
}

function createPropertiesList(): HTMLTableElement {
	const tbl = document.createElement("table");
	tbl.classList.add("properties-list");

	const thead = document.createElement("thead");
	const theadTR = document.createElement("tr");
	const theadTHs = [
		document.createElement("th"),
		document.createElement("th"),
		document.createElement("th")
	];
	
	theadTHs[0].textContent = "Type";
	theadTHs[1].textContent = "Parameters";
	theadTHs[2].textContent = "Actions";

	theadTR.append(theadTHs[0], theadTHs[1], theadTHs[2]);
	thead.append(theadTR);

	const tbody = document.createElement("tbody");
	tbody.id = "properties";

	getSamplers().forEach(sampler => {
		const samplerHtml = sampler.createHTML();
		addPropertyActionsTo(samplerHtml, sampler.id(), sampler.htmlID());
		tbody.appendChild(samplerHtml);
	});
	
	const tfoot = createAddNewProperty();
	tbl.append(thead, tbody, tfoot);

	return tbl;
}

function createFileOps(): HTMLTableElement {
	const tbl = document.createElement("table");
	tbl.id = "file-ops";

	const thead = document.createElement("thead");
	const theadTR = document.createElement("tr");
	const theadTH = document.createElement("th");
	theadTH.textContent = "File";
	theadTH.colSpan = 2;

	theadTR.appendChild(theadTH);
	thead.appendChild(theadTR);

	const tbody = document.createElement("tbody");

	const trs = [
		document.createElement("tr"),
		document.createElement("tr"),
		document.createElement("tr")
	];

	const downloadTH = document.createElement("th");
	const downloadTD = document.createElement("td");

	downloadTH.textContent = "Download Palette: ";

	const downloadGPL = document.createElement("button");
	downloadGPL.type = "button";
	downloadGPL.id = "download-gpl";
	downloadGPL.textContent = "Download GPL";
	downloadGPL.onclick = () => { downloadAsGPLFile(); };

	downloadTD.appendChild(downloadGPL);

	trs[0].append(downloadTH, downloadTD);

	const loadTH = document.createElement("th");
	const loadTD = document.createElement("td");

	loadTH.textContent = "Load Session: ";

	const load = document.createElement("input");
	load.type = "file";
	load.accept = ".psf";
	load.id = "local-loader";
	load.addEventListener("change", (event) => {
		load.files[0].text().then((file) => {
			loadLocal(file);
		});
	});

	loadTD.appendChild(load);

	trs[1].append(loadTH, loadTD);

	const saveTH = document.createElement("th");
	const saveTD = document.createElement("td");

	saveTH.textContent = "Save Session: ";

	const save = document.createElement("button");
	save.type = "button";
	save.textContent = "Save";
	save.onclick = saveLocal;

	saveTD.appendChild(save);

	trs[2].append(saveTH, saveTD);

	tbody.append(trs[0], trs[1], trs[2]);

	tbl.append(thead, tbody);

	return tbl;
}

function createReadoutSection(): HTMLDivElement {
	const div = document.createElement("div");
	div.classList.add("centered");
	div.id = "readout-section";
	return div;
}

function createInputSection(): HTMLDivElement {
	const div = document.createElement("div");
	div.id = "input-section";
	return div;
}

function createPage() {
	const app = document.getElementById("app");

	const settings = createSettingsTable();

	getSamplers().push(new LinearRGBSampler(genSamplerID()));

	const appSplit = document.createElement("div");
	//appSplit.id = "app-split";

	const readoutSect = createReadoutSection();
	readoutSect.appendChild(createNewPaletteViewFrom(8, getSamplers()));

	const inputSect = createInputSection();
	inputSect.appendChild(createPropertiesList());

	appSplit.append(readoutSect, inputSect);

	app.append(settings, appSplit, createFileOps());

	clampPropertyShiftBtns();

	if(window.innerHeight > window.innerWidth)
		appSplit.id = "app-split-v";
	else
		appSplit.id = "app-split-h";

	window.onresize = (event) => {
		const id = window.innerHeight > window.innerWidth 
			? "app-split-v" : "app-split-h";

		appSplit.id = id;
	};
}

function setNoErrorState() {
	const errors = document.getElementById("errors");
	errors.className = "errors-none";
	errors.textContent = "No errors :)";

	const paletteView = document.getElementById("palette-view");
	paletteView.classList.remove("bad-palette-view");

	(<HTMLInputElement> document.getElementById("download-gpl")).disabled = false;
}

function setErrorState() {
	const errors = document.getElementById("errors");
	errors.className = "errors-some";

	const paletteView = document.getElementById("palette-view");
	paletteView.classList.add("bad-palette-view");

	(<HTMLInputElement> document.getElementById("download-gpl")).disabled = true;
}

function setErrors(errors: string[]) {
	if(errors.length > 0) {
		setErrorState();

		const errorsEl = document.getElementById("errors");
		errorsEl.textContent = errors.reduce((errList, error) => {
			return errList + '\n' + error;
		});
	}
	else {
		setNoErrorState();
	}
}

function validate() {
	const errors : string[] = [];

	const pvColors = document.querySelectorAll("#palette-view > tbody > tr > td");
	
	const maxColorsEl = <HTMLInputElement> document.getElementById("max-colors");
	const maxColors = parseInt(maxColorsEl.value);

	if(maxColors > 0 && pvColors.length > maxColors) {
		errors.push("More colors than max palette size!");
	}

	const filename = <HTMLInputElement> document.getElementById("pal-name");
	if(filename.value.search(/[\.\<\>\\\/\*]+$/g) != -1) {
		errors.push("Invalid file name:");
		errors.push("Disallowed character.");
	}
	
	setErrors(errors);
}

function onLoad() {
	createPage();
	validate();
}

